import 'package:harmoniglow/screens/shuffle/shuffle_model.dart';
import 'package:harmoniglow/screens/songs/songs_model.dart';

class MockApiService {
  /// Fetches beat data based on the beat index or retrieves a default generated notes set.
  Future<SongModel> fetchBeatData({int? beatIndex}) async {
    // Decide which notes to fetch: parametric beats or default generated notes

    // Get beat info if not using default notes
    final Map<String, dynamic> beatInfo = beatInfoList[beatIndex ?? 0];

    return SongModel.fromJson(beatInfo);
  }

  Future<List<SongModel>> fetchSongData() async => _getSongInfo();

  Future<List<SongModel>?> fetchAllBeats() async {
    final List<SongModel> beats = [];
    for (int i = 0; i < beatInfoList.length; i++) {
      beats.add(SongModel.fromJson(beatInfoList[i]));
    }
    return beats;
  }

  /// Fetches all beats based on the genre
  Future<List<SongModel>> fetchBeatsByGenre(String genre) async {
    final List<SongModel> beats = [];
    for (int i = 0; i < beatInfoList.length; i++) {
      if (beatInfoList[i]['genre'] == genre) {
        beats.add(SongModel.fromJson(beatInfoList[i]));
      }
    }
    return beats;
  }

  List<Map<String, dynamic>> beatInfoList = [
    {
      'title': 'Bread â€˜n Butter',
      'rhythm': '4:4',
      'bpm': 92,
      'durationSeconds': 100,
      'genre': 'Rock',
      'fileUrl':
          'https://drumeoblog.s3.amazonaws.com/beat/wp-content/uploads/2021/10/15085321/1.-Bread-n-Butter-92bpm.wav',
      'notes': [
        [1, 8], // Beat 1: Hi-Hat + Kick
        [1], // Beat 2: Hi-Hat
        [1, 4], // Beat 3: Hi-Hat + Snare
        [1], // Beat 4: Hi-Hat
        [1, 8], // Beat 5: Hi-Hat + Kick
        [1], // Beat 6: Hi-Hat
        [1, 4], // Beat 7: Hi-Hat + Snare
        [1], // Beat 8: Hi-Hat
      ],
    },
    {
      'title': 'Big Bell Bounce',
      'rhythm': '4:4',
      'bpm': 98,
      'durationSeconds': 5,
      'genre': 'Pop',
      'fileUrl':
          'https://drumeoblog.s3.amazonaws.com/beat/wp-content/uploads/2021/10/15085354/2.-Big-Bell-Bounce-98bpm.wav',
      'notes': [
        [1, 3],
        [1],
        [1, 3],
        [1],
        [1, 2, 3],
        [1],
        [1, 3],
        [1],
        [1, 2, 3],
        [1],
      ],
    },
    {
      'title': 'Hi-Hat Hotness',
      'rhythm': '4:4',
      'bpm': 100,
      'durationSeconds': 10,
      'genre': 'Disco',
      'fileUrl':
          'https://drumeoblog.s3.amazonaws.com/beat/wp-content/uploads/2021/10/15085414/3.-Hi-Hat-Hotness-100bpm.wav',
      'notes': [
        [1, 8],
        [1],
        [1],
        [1],
        [1, 8, 2],
        [1],
        [1],
        [1],
        [1, 8],
        [1],
        [1],
        [1],
        [1, 2, 8],
        [1],
        [1],
        [1],
      ],
    },
    {
      'title': 'Funk Beat',
      'rhythm': '4:4',
      'bpm': 110,
      'durationSeconds': 10,
      'genre': 'Funk',
      'fileUrl':
          'https://drumeoblog.s3.amazonaws.com/beat/wp-content/uploads/2021/10/15085354/2.-Big-Bell-Bounce-98bpm.wav',
      'notes': [
        [1, 3],
        [-1],
        [3],
        [-1],
        [1, 2, 3],
        [-1],
        [3],
        [1, 3],
        [2, 3],
      ],
    },
    {
      'title': 'Shuffle Beat',
      'rhythm': '4:4',
      'bpm': 90,
      'durationSeconds': 10,
      'genre': 'Pop',
      'fileUrl':
          'https://drumeoblog.s3.amazonaws.com/beat/wp-content/uploads/2021/10/15085354/2.-Big-Bell-Bounce-98bpm.wav',
      'notes': [
        [1, 3],
        [-1],
        [2, 3],
        [-1],
        [1, 3],
        [-1],
        [2, 3],
        [-1],
      ],
    },
    {
      'title': '16th Note Groove',
      'rhythm': '4:4',
      'bpm': 140,
      'durationSeconds': 10,
      'genre': 'Groove',
      'fileUrl':
          'https://drumeoblog.s3.amazonaws.com/beat/wp-content/uploads/2021/10/15085354/2.-Big-Bell-Bounce-98bpm.wav',
      'notes': [
        [1, 3],
        [3],
        [3],
        [2, 3],
        [3],
        [1, 3],
        [3],
        [2, 3],
      ],
    },
    {
      'title': 'Half-Time Groove',
      'rhythm': '4:4',
      'bpm': 80,
      'durationSeconds': 30,
      'genre': 'Rock',
      'fileUrl':
          'https://drumeoblog.s3.amazonaws.com/beat/wp-content/uploads/2021/10/15085354/2.-Big-Bell-Bounce-98bpm.wav',
      'notes': [
        [1, 3],
        [-1],
        [9],
        [-1],
        [2, 3],
        [-9],
        [3],
        [-1],
        [1, 8],
        [-1],
        [3],
        [-7],
        [2, 3],
        [-1],
        [3],
        [-1],
        [1, 3],
        [-1],
        [3],
        [-1],
        [2, 3],
        [-1],
        [3],
        [-1],
        [1, 3],
        [-1],
        [3],
        [-1],
        [2, 3],
        [-1],
        [3],
        [-1],
        [1, 3],
        [-1],
        [3],
        [-1],
        [2, 3],
        [-1],
        [3],
        [-1],
        [1, 3],
        [-1],
        [3],
        [-1],
        [2, 3],
        [-1],
        [3],
        [-1],
      ],
    },
    {
      'title': 'Reggae Beat',
      'rhythm': '4:4',
      'bpm': 70,
      'durationSeconds': 10,
      'genre': 'Reggae',
      'fileUrl':
          'https://drumeoblog.s3.amazonaws.com/beat/wp-content/uploads/2021/10/15085354/2.-Big-Bell-Bounce-98bpm.wav',
      'notes': [
        [1],
        [-4],
        [-1],
        [4],
        [2],
        [-4],
        [-1],
        [4],
      ],
    },
    {
      'title': 'Jazz Swing Beat',
      'rhythm': '4:4',
      'bpm': 110,
      'durationSeconds': 10,
      'genre': 'Jazz',
      'fileUrl':
          'https://drumeoblog.s3.amazonaws.com/beat/wp-content/uploads/2021/10/15085354/2.-Big-Bell-Bounce-98bpm.wav',
      'notes': [
        [1, 5],
        [-1],
        [2, 5],
        [-1],
        [1, 5],
        [-1],
        [2, 5],
        [-1],
      ],
    },
    {
      'title': 'Bossa Nova Beat',
      'rhythm': '4:4',
      'bpm': 120,
      'durationSeconds': 40,
      'genre': 'Pop',
      'fileUrl':
          'https://drumeoblog.s3.amazonaws.com/beat/wp-content/uploads/2021/10/15085354/2.-Big-Bell-Bounce-98bpm.wav',
      'notes': [
        [1],
        [2],
        [3],
        [4],
        [5],
        [6],
        [7],
        [8],
        [99],
        [1, 2],
        [2, 3],
        [3, 4],
        [4, 5],
        [5, 6],
        [6, 7],
        [7, 8],
        [8, 1],
        [99],
        [1, 2, 3],
        [2, 3, 4],
        [3, 4, 5],
        [4, 5, 6],
        [5, 6, 7],
        [6, 7, 8],
        [7, 8, 1],
        [8, 1, 2],
      ],
    }
  ];

  /// Fetches all beat names
  List<String> fetchAllBeatGenres() => [
        'Rock',
        'Pop',
        'Disco',
        'Funk',
        'Groove',
        'Reggae',
        'Jazz',
      ];

  /// Retrieves beat metadata based on the index
  List<SongModel> _getSongInfo() {
    final List<Map<String, dynamic>> beatSongList = [
      {
        'title': 'In the End',
        'artist': 'Linkin Park',
        'rhythm': '4:4',
        'bpm': 105,
        'durationSeconds': 216, // ~3:36 = 216 seconds
        'genre': 'Nu Metal',
        'songtypeId': '1',
        'songId': '1',
        'fileUrl':
            'https://ia801705.us.archive.org/25/items/LinkinParkBySen/08%20In%20the%20End.mp3',
        'notes': [
          [2, 3, 9],
          [2, 3, 9],
          [3],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [1, 3, 9],
          [2],
          [0],
          [2, 3, 9],
          [2],
          [2],
          [2, 3, 9],
          [2, 3, 9],
          [3],
          [2, 3, 9],
          [1, 3, 9],
          [2, 3, 9],
          [2],
          [3],
          [0],
          [2, 3, 9],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [0],
          [1, 3, 9],
          [2, 3, 9],
          [0],
          [0],
          [2],
          [0],
          [2, 3, 9],
          [4, 3, 9],
          [1, 3, 9],
          [0],
          [2],
          [2],
          [0],
          [1, 3, 9],
          [4, 3, 9],
          [4, 3, 9],
          [4, 3, 9],
          [0],
          [3],
          [4, 3, 9],
          [2],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [0],
          [0],
          [4, 3, 9],
          [2, 3, 9],
          [2],
          [2],
          [2, 3, 9],
          [3],
          [1, 3, 9],
          [2],
          [2, 3, 9],
          [2, 3, 9],
          [4, 3, 9],
          [2, 3, 9],
          [2],
          [2, 3, 9],
          [1, 3, 9],
          [0],
          [0],
          [4, 3, 9],
          [0],
          [0],
          [4, 3, 9],
          [2, 3, 9],
          [3],
          [2, 3, 9],
          [0],
          [3],
          [0],
          [2, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [2],
          [2, 3, 9],
          [3],
          [3],
          [2, 3, 9],
          [2, 3, 9],
          [2],
          [2, 3, 9],
          [3],
          [2, 3, 9],
          [1, 3, 9],
          [2, 3, 9],
          [4, 3, 9],
          [3],
          [0],
          [2, 3, 9],
          [3],
          [0],
          [2],
          [2],
          [4, 3, 9],
          [0],
          [0],
          [3],
          [0],
          [4, 3, 9],
          [2],
          [2, 3, 9],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [1, 3, 9],
          [1, 3, 9],
          [2, 3, 9],
          [4, 3, 9],
          [0],
          [0],
          [2],
          [2, 3, 9],
          [0],
          [1, 3, 9],
          [4, 3, 9],
          [0],
          [2],
          [2, 3, 9],
          [2, 3, 9],
          [4, 3, 9],
          [2],
          [0],
          [0],
          [0],
          [4, 3, 9],
          [2],
          [0],
          [2, 3, 9],
          [1, 3, 9],
          [0],
          [1, 3, 9],
          [2, 3, 9],
          [1, 3, 9],
          [1, 3, 9],
          [2],
          [0],
          [2],
          [2, 3, 9],
          [1, 3, 9],
          [2, 3, 9],
          [2],
          [2],
          [0],
          [2, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [0],
          [0],
          [2, 3, 9],
          [1, 3, 9],
          [2, 3, 9],
          [2],
          [2],
          [1, 3, 9],
          [0],
          [0],
          [1, 3, 9],
          [0],
          [3],
          [0],
          [0],
          [2, 3, 9],
          [0],
          [1, 3, 9],
          [3],
          [2],
          [2, 3, 9],
          [1, 3, 9],
          [2, 3, 9],
          [4, 3, 9],
          [0],
          [0],
          [4, 3, 9],
          [3],
          [4, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [0],
          [2],
          [4, 3, 9],
          [3],
          [2],
          [0],
          [2],
          [0],
          [0],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [3],
          [1, 3, 9],
          [0],
          [2, 3, 9],
          [1, 3, 9],
          [2],
          [0],
          [2, 3, 9],
          [2, 3, 9],
          [0],
          [2],
          [0],
          [2, 3, 9],
          [2],
          [2, 3, 9],
          [1, 3, 9],
          [0],
          [2],
          [4, 3, 9],
          [2, 3, 9],
          [3],
          [1, 3, 9],
          [2, 3, 9],
          [4, 3, 9],
          [1, 3, 9],
          [0],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [2, 3, 9],
          [4, 3, 9],
          [0],
          [3],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [0],
          [0],
          [2, 3, 9],
          [0],
          [3],
          [0],
          [0],
          [0],
          [2, 3, 9],
          [1, 3, 9],
          [0],
          [2],
          [2],
          [4, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [3],
          [3],
          [4, 3, 9],
          [3],
          [2, 3, 9],
          [2, 3, 9],
          [1, 3, 9],
          [0],
          [0],
          [0],
          [2],
          [0],
          [3],
          [2, 3, 9],
          [2, 3, 9],
          [3],
          [1, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [0],
          [3],
          [0],
          [2, 3, 9],
          [1, 3, 9],
          [0],
          [3],
          [2],
          [3],
          [2, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [4, 3, 9],
          [1, 3, 9],
          [2, 3, 9],
          [0],
          [0],
          [0],
          [3],
          [2, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [4, 3, 9],
          [0],
          [2, 3, 9],
          [2, 3, 9],
          [2],
          [2, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [4, 3, 9],
          [3],
          [1, 3, 9],
          [2],
          [0],
          [3],
          [2, 3, 9],
          [2, 3, 9],
          [0],
          [0],
          [2, 3, 9],
          [3],
          [0],
          [1, 3, 9],
          [2, 3, 9],
          [1, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [0],
          [0],
          [1, 3, 9],
          [2],
          [2, 3, 9],
          [4, 3, 9],
          [0],
          [2, 3, 9],
          [2, 3, 9],
          [3],
          [0],
          [2, 3, 9],
          [0],
          [2, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [3],
          [0],
          [4, 3, 9],
          [2, 3, 9],
          [2, 3, 9],
          [3],
          [2, 3, 9],
          [4, 3, 9],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [1],
          [0],
          [1],
          [2],
          [3],
          [4],
          [5],
          [6],
          [7],
          [8],
        ],
      },
    ];

    return beatSongList.map((json) => SongModel.fromJson(json)).toList();
  }

  /*----------------------------------------------------------------------
                  Shuffle List
----------------------------------------------------------------------*/
  Future<List<ShuffleModel>?> getShuffleList() async {
    final List<ShuffleModel> shuffleList = [
      ShuffleModel(
        name: 'Basic Rock Beat',
        color: '0xFFB71C1C', // Dark Red
        bpm: 100,
      ),
      ShuffleModel(
        name: 'Basic Pop Beat',
        color: '0xFF4CAF50', // Green
        bpm: 50,
      ),
      ShuffleModel(
        name: 'Disco Beat',
        color: '0xFFFFC107', // Amber
        bpm: 130,
      ),
      ShuffleModel(
        name: 'Funk Beat',
        color: '0xFF9C27B0', // Purple
        bpm: 110,
      ),
      ShuffleModel(
        name: 'Shuffle Beat',
        color: '0xFF2196F3', // Blue
        bpm: 90,
      ),
      ShuffleModel(
        name: '16th Note Groove',
        color: '0xFFFF5722', // Deep Orange
        bpm: 140,
      ),
      ShuffleModel(
        name: 'Half-Time Groove',
        color: '0xFF795548', // Brown
        bpm: 80,
      ),
      ShuffleModel(
        name: 'Reggae Beat',
        color: '0xFF8BC34A', // Light Green
        bpm: 70,
      ),
      ShuffleModel(
        name: 'Jazz Swing Beat',
        color: '0xFF3F51B5', // Indigo
        bpm: 110,
      ),
      ShuffleModel(
        name: 'Bossa Nova Beat',
        color: '0xFFFF9800', // Orange
        bpm: 120,
      ),
    ];

    return shuffleList;
  }
}
